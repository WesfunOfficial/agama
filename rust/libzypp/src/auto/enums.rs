// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,translate::*};

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ZyppException")]
pub enum Exception {
    #[doc(alias = "ZYPP_ERROR")]
    Error,
#[doc(hidden)]
    __Unknown(i32),
}

impl Exception {
    #[doc(alias = "zypp_exception_quark")]
    pub fn quark() -> glib::Quark {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::zypp_exception_quark())
        }
    }
}

#[doc(hidden)]
impl IntoGlib for Exception {
    type GlibType = ffi::ZyppException;

    #[inline]
fn into_glib(self) -> ffi::ZyppException {
match self {
            Self::Error => ffi::ZYPP_ERROR,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::ZyppException> for Exception {
    #[inline]
unsafe fn from_glib(value: ffi::ZyppException) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::ZYPP_ERROR => Self::Error,
            value => Self::__Unknown(value),
}
}
}

impl StaticType for Exception {
                #[inline]
    #[doc(alias = "zypp_exception_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::zypp_exception_get_type()) }
                }
            }

impl glib::HasParamSpec for Exception {
                type ParamSpec = glib::ParamSpecEnum;
                type SetValue = Self;
                type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder_with_default
                }
}

impl glib::value::ValueType for Exception {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for Exception {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for Exception {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<Exception> for glib::Value {
    #[inline]
    fn from(v: Exception) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

