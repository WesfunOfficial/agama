//! D-Bus interface proxies for: `org.opensuse.Agama*.**.*`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.`.
use zbus::proxy;

/// Progress1Proxy can be used also with Software and Storage object.
///
/// TODO: example
#[proxy(
    interface = "org.opensuse.Agama1.Progress",
    default_service = "org.opensuse.Agama.Manager1",
    default_path = "/org/opensuse/Agama/Manager1"
)]
trait Progress {
    /// CurrentStep property
    #[zbus(property)]
    fn current_step(&self) -> zbus::Result<(u32, String)>;

    /// Finished property
    #[zbus(property)]
    fn finished(&self) -> zbus::Result<bool>;

    /// TotalSteps property
    #[zbus(property)]
    fn total_steps(&self) -> zbus::Result<u32>;
}

#[proxy(
    interface = "org.opensuse.Agama1.ServiceStatus",
    default_service = "org.opensuse.Agama.Manager1",
    default_path = "/org/opensuse/Agama/Manager1"
)]
trait ServiceStatus {
    /// All property
    #[zbus(property)]
    fn all(
        &self,
    ) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

    /// Current property
    #[zbus(property)]
    fn current(&self) -> zbus::Result<u32>;
}

#[proxy(
    interface = "org.opensuse.Agama.Manager1",
    default_service = "org.opensuse.Agama.Manager1",
    default_path = "/org/opensuse/Agama/Manager1"
)]
trait Manager1 {
    /// CanInstall method
    fn can_install(&self) -> zbus::Result<bool>;

    /// CollectLogs method
    fn collect_logs(&self) -> zbus::Result<String>;

    /// Commit method
    fn commit(&self) -> zbus::Result<()>;

    /// Finish method
    fn finish(&self) -> zbus::Result<()>;

    /// Probe method
    fn probe(&self) -> zbus::Result<()>;

    /// BusyServices property
    #[zbus(property)]
    fn busy_services(&self) -> zbus::Result<Vec<String>>;

    /// CurrentInstallationPhase property
    #[zbus(property)]
    fn current_installation_phase(&self) -> zbus::Result<u32>;

    /// IguanaBackend property
    #[zbus(property)]
    fn iguana_backend(&self) -> zbus::Result<bool>;

    /// InstallationPhases property
    #[zbus(property)]
    fn installation_phases(
        &self,
    ) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;
}

#[proxy(
    interface = "org.opensuse.Agama1.Questions",
    default_service = "org.opensuse.Agama1",
    assume_defaults = true
)]
trait Questions {
    /// AddAnswerFile method
    fn add_answer_file(&self, path: &str) -> zbus::Result<()>;

    /// Delete method
    fn delete(&self, question: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// New method
    #[zbus(name = "New")]
    fn new_question(
        &self,
        class: &str,
        text: &str,
        options: &[&str],
        default_option: &str,
        data: std::collections::HashMap<&str, &str>,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// NewWithPassword method
    fn new_with_password(
        &self,
        class: &str,
        text: &str,
        options: &[&str],
        default_option: &str,
        data: std::collections::HashMap<&str, &str>,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Interactive property
    #[zbus(property)]
    fn interactive(&self) -> zbus::Result<bool>;
    #[zbus(property)]
    fn set_interactive(&self, value: bool) -> zbus::Result<()>;
}

#[proxy(
    interface = "org.opensuse.Agama1.Questions.Generic",
    default_service = "org.opensuse.Agama1",
    default_path = "/org/opensuse/Agama1/Questions"
)]
trait GenericQuestion {
    /// Answer property
    #[zbus(property)]
    fn answer(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_answer(&self, value: &str) -> zbus::Result<()>;

    /// Class property
    #[zbus(property)]
    fn class(&self) -> zbus::Result<String>;

    /// Data property
    #[zbus(property)]
    fn data(&self) -> zbus::Result<std::collections::HashMap<String, String>>;

    /// DefaultOption property
    #[zbus(property)]
    fn default_option(&self) -> zbus::Result<String>;

    /// Id property
    #[zbus(property)]
    fn id(&self) -> zbus::Result<u32>;

    /// Options property
    #[zbus(property)]
    fn options(&self) -> zbus::Result<Vec<String>>;

    /// Text property
    #[zbus(property)]
    fn text(&self) -> zbus::Result<String>;
}

#[proxy(
    interface = "org.opensuse.Agama1.Questions.WithPassword",
    default_service = "org.opensuse.Agama1",
    default_path = "/org/opensuse/Agama1/Questions"
)]
trait QuestionWithPassword {
    /// Password property
    #[zbus(property)]
    fn password(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_password(&self, value: &str) -> zbus::Result<()>;
}

#[proxy(interface = "org.opensuse.Agama1.Issues", assume_defaults = true)]
trait Issues {
    /// All property
    #[zbus(property)]
    fn all(&self) -> zbus::Result<Vec<(String, String, u32, u32)>>;
}

#[proxy(interface = "org.opensuse.Agama1.Validation", assume_defaults = true)]
trait Validation {
    /// Errors property
    #[zbus(property)]
    fn errors(&self) -> zbus::Result<Vec<String>>;

    /// Valid property
    #[zbus(property)]
    fn valid(&self) -> zbus::Result<bool>;
}
